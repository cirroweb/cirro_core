<?php

/**
 * @file
 *   Create CRUD GUI stuff for entities setup through the core module.
 */

/**
 * Implements hook_permission().
 *
 * Programmatically build permissions for all cirro entities.
 */
function cirro_core_permission() {
	
	// Init
	$entities = array();
	$perms = array();
	$entity_info = entity_get_info();
	
	// Loop through to build permissions
	foreach ( $entity_info as $mach_name => $info ) {
		
		// Check for cirroCoreController
		if ( $info['controller class'] === 'cirroCoreController' ) {
			
			// Add to entities array
			$entities[$mach_name] = $info['label'];

		}

	}
	
	// Loop through entities to build perms
	foreach ( $entities as $mach_name => $label ) {
		
		// Create
		$perms["add $mach_name"] = array(
			'title' => "Create $label",
			'description' => "Allow to create new $label",
		);
		
		// Update
		$perms["edit $mach_name"] = array(
			'title' => "Update $label",
			'description' => "Allow to update existing $label",
		);
		
		// Delete
		$perms["delete $mach_name"] = array(
			'title' => "Delete $label",
			'description' => "Allow to delete $label",
		); 
		
	}
	
	return $perms;

}

/**
 * Implements hook_theme().
 */
function cirro_core_theme() {
	
	return array(
		
		'cirro_core_multi_img_weight_form' => array(
			'render element' => 'form',
		),
		
		'cirro_core_weights_form' => array(
			'render element' => 'form',
		),
		
	);

}

/**
 * Implements hook_entity_info().
 */
function cirro_core_entity_info() {
 
  // Init
 	$entities = array ();

  //  Create_multi_image
	$entities['multi_img'] = array(
		'label' => t('Multiple Image'),
		'controller class' => 'cirroCoreController',
		'base table' => 'cirro_multi_img',
		'fieldable' => FALSE,
		'entity keys' => array(
			'id' => 'id',
		),
		'static cache' => TRUE,
	);
	
	return $entities;

}

/**
 * Implements hook_menu().
 *
 * Programmatically create page registrations for CRUD GUI.
 */
function cirro_core_menu() {
	
	// Init
	$items = array();
	$entities = array();
	$entity_info = entity_get_info();
	
	// Loop through to build permissions
	foreach ( $entity_info as $mach_name => $info ) {
		
		// Check for cirroCoreController
		if ( $info['controller class'] === 'cirroCoreController' ) {
			
			// Add to entities array
			$entities[$mach_name] = $info;

		}

	}

	// Loop through entities
	foreach ( $entities as $mach_name => $info ) {

		// Init
		$label = $info['label'];

		/**
		 * Entity Add page
		 * Args by segment number
		 *  - 2: type
		 *  - 3: loaded item(action)
		 */
		$items["admin/dash/$mach_name/add"] = array(
			'title' => "Create $label",
			'page callback' => 'cirro_core_entity_edit_page',
			'page arguments' => array( 2, 3),
			'access callback' => 'cirro_core_access_callback',
			'access arguments' => array(2, 3),
			'file' => 'cirro_core_forms.inc',
		);

		// Entity edit
		$items["admin/dash/$mach_name/%cirro_core_single/edit"] = array(
			'title' => "Save $label",
			'title callback' => FALSE,
			'load arguments' => array(2),
			'page callback' => 'cirro_core_entity_edit_page',
			'page arguments' => array(2, 3, 4),
			'access callback' => 'cirro_core_access_callback',
			'access arguments' => array(2, 4),
			'file' => 'cirro_core_forms.inc',
		);
		
		// Entity delete
		$items["admin/dash/$mach_name/%cirro_core_single/delete"] = array(
			'title' => "Delete $label",
			'load arguments' => array(2),
			'page callback' => 'drupal_get_form',
			'page arguments' => array('cirro_core_entity_delete_form', 2, 3, 4),
			'access callback' => 'cirro_core_access_callback',
			'access arguments' => array(2, 4),
			'file' => 'cirro_core_forms.inc',
		);
		
		// Check for weight option
		if ( isset($info['dashboard']) && in_array('weight', $info['dashboard']) ) {
			
			// Weight form
			$items["admin/dash/weights/$mach_name"] = array(
				'title' => "Reorder $label",
				'page callback' => 'drupal_get_form',
				'page arguments' => array('cirro_core_weights_form', 3),
				'access callback' => 'cirro_core_access_callback',
				'access arguments' => array(3, 'edit'),
				'file' => 'cirro_core_forms.inc',
			);
			
		}

	}
	
	return $items;

}

/**
 * Load single entity item.
 *
 * @param $id
 *   ID of item to load
 *
 * @param $type
 *   Entity type of item to load.
 *
 * @return
 *   Item object
 */
function cirro_core_single_load($id, $type) {
	
	// Load array from entity_load
	$array = entity_load($type, array($id));
	
	// Return first item
	return reset($array);

}

/**
 * Access callback
 *
 * @param $type
 *   Entity type
 *
 * @param $action
 *   Action to be performed
 */
function cirro_core_access_callback($type, $action) {
	
	// Build permission string
	$perm = "$action $type";
	
	return user_access($perm);

}

/**
 * Basic numeric form element validation.
 */
function cirro_core_numeric_element_validate($element, &$form_state, $form) {

	// Check for numeric value
	if ( !is_numeric($element['#value']) ) {
		
		// Set error on element
		form_error($element, 'Value must be numeric');

	}

}

/**
 * Implements hook_forms().
 *
 * Maps multiple form_ids to single form validate/submit shiz.
 *
 */
function cirro_core_forms($form_id, $args) {
	
	// Init
	$forms = array();
	
	// Load all entity info
	$entities = entity_get_info();
	
	// Loop through entities
	foreach ( $entities as $mach_name => $info ) {
				
		// Check schema for multi img
		if ( isset($info['multi_img']) ) {

			// Loop through multi img fields
			foreach ( $info['multi_img'] as $field_name => $field_data ) {
				
				// Add multi_img weights form id
				$forms["cirro_core_{$mach_name}_{$field_name}_multi_img_weights"] = array(

					'callback' => 'cirro_core_multi_img_weight_form',

				);

			}
			
		}
		
		// Check schema for children
		if ( isset($info['children']) ) {
			
			// Loop through children
			foreach ( $info['children'] as $child_type => $child_label ) {
				
				// Create form id mapping
				$forms["cirro_core_{$child_type}_children_weights"] = array(
					
					'callback' => 'cirro_core_children_weight_form',

				);
				
			}
			
		}

	}
	
	return $forms;

}

/**
 * Theme item weights forms.
 *
 * @param $variables
 *   Themeing variables array
 */
function theme_cirro_core_weights_form($variables) {
	
	// Init
	$output = '';
	$rows = array();
	
	// Load form array
	$form = $variables['form'];
	
	// Activate tabledrag shiz
	drupal_add_tabledrag('draggable-table', 'order', 'sibling', 'weight-group');
	
	// Loop through form Elements
	foreach ( element_children($form['items']) as $key ) {
		
		// Init
		$element = array();
		$data = '';
		$row = array();
		
		// Skip none numeric keys
		if ( !is_numeric($key) ) continue;
		
		// Load element
		$element = &$form['items'][$key];
		
		// Add class to weight field
		$element['weight']['#attributes']['class'] = array('weight-group');
		
		// Put data fields together
		$data .= drupal_render($element['id']);
		
		// Build row
		$row = array();
		$row[] = drupal_render($element['name']) . $data;
		$row[] = drupal_render($element['weight']);
		
		// Add to rows
		$rows[] = array( 'data' => $row, 'class' => array('draggable'));

	}
	
	// Define headers
	$headers = array(
		'Name',
		'Weight',
	);

	// Define table vars
	$table_vars = array(
		'header' => $headers,
		'rows' => $rows,
		'attributes' => array(
			'id' => 'draggable-table',
			'class' => array(
				'table',
				'table-bordered',
				'table-striped',
			),
		),
		'caption' => 'Drag and Drop to change order',
		'colgroups' => array(),
		'sticky' => FALSE,
		'empty' => 'No Items Found',
	);
	
	// Add table to output
	$table = theme_table($table_vars);
	
	// Render remaining form elements
	$form_children = drupal_render_children($form);
	
	// Build output with wrapper
	$output = "
		<div class=\"span8\">
			$table
			$form_children
		</div>
	";
	
	return $output;

}

/**
 * Theme multi image weights forms.
 *
 * @param $variables
 *   Themeing variables array
 */
function theme_cirro_core_multi_img_weight_form($variables) {
	
	// Init
	$output = '';
	$rows = array();
	
	// Load form array
	$form = $variables['form'];
	
	// Activate tabledrag shiz
	drupal_add_tabledrag('draggable-table', 'order', 'sibling', 'weight-group');
	
	// Loop through form Elements
	foreach ( element_children($form['imgs']) as $key ) {
		
		// Init
		$element = array();
		$data = '';
		$row = array();
		
		// Skip none numeric keys
		if ( !is_numeric($key) ) continue;
		
		// Load element
		$element = &$form['imgs'][$key];
		
		// Add class to weight field
		$element['weight']['#attributes']['class'] = array('weight-group');
		
		// Put data fields together
		$data .= drupal_render($element['id']);
		$data .= drupal_render($element['img_title']);
		$data .= drupal_render($element['img_alt']);
		
		// Build row
		$row = array();
		$row[] = drupal_render($element['thumbnail']);
		$row[] = $data;
		$row[] = drupal_render($element['weight']);
		$row[] = drupal_render($element['delete_link']);
		
		// Add to rows
		$rows[] = array( 'data' => $row, 'class' => array('draggable'));

	}
	
	// Define headers
	$headers = array(
		'File',
		'Data',
		'Weight',
		'',
	);

	// Define table vars
	$table_vars = array(
		'header' => $headers,
		'rows' => $rows,
		'attributes' => array(
			'id' => 'draggable-table',
			'class' => array(
				'table',
				'table-bordered',
				'table-striped'
			),
		),
		'caption' => 'Drag and Drop to change order',
		'colgroups' => array(),
		'sticky' => FALSE,
		'empty' => 'No Images found',
	);
	
	// Add table to output
	$output = theme_table($table_vars);
	
	// Render remaining form elements
	$output .= drupal_render_children($form);	
	
	return $output;

}

/**
 * Multi-image load helper function
 */
 function cirro_core_multi_img_load_helper($type, $id, $field){
	 
	 // Init stuff here
	 $imgs = array();
	 
		
		// Query items
		$img_query_string = "
		SELECT m.img_alt, m.img_title, f.uri, f.fid 
	  	FROM cirro_multi_img AS m
	  	JOIN file_managed AS f
	  		ON m.fid = f.fid
	  	WHERE parent_id = :id
	  	AND parent_type = :type
	  	AND parent_field = :field
	  	ORDER BY m.weight
		";
		
		$placeholders = array(
			':id' => $id,
			':type' => $type,
			':field' => $field,
		);
		
			$img_query = db_query($img_query_string, $placeholders);
			$img_results = $img_query->fetchAll();
	 
	 // If images return url, title, alt
	 foreach ( $img_results as $img_result ) {
		 
		 $img_result->url = file_create_url($img_result->uri);
		 
		 $imgs[] = $img_result;
 
	 }
	
	 return $imgs;	 
 }